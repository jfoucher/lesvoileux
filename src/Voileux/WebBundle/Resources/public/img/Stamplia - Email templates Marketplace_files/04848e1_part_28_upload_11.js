// Generated by CoffeeScript 1.4.0
(function() {

  App.View.Upload = App.View.extend({
    tagName: 'div',
    id: 'uploads',
    className: 'admin-module clearfix',
    templateName: 'upload',
    breadcrumbs: null,
    uploader: null,
    tags: [],
    events: {
      'click .disabled': 'noop',
      'submit form': 'submit',
      'click #add-tag-button': 'addTag'
    },
    render: function() {
      var _this = this;
      $(this.el).html(this.template({
        model: this.model
      }));
      App.setActive('uploads');
      this.breadcrumbs = [
        {
          label: App.user.get('name'),
          link: '#dashboard'
        }, {
          label: 'Upload'
        }
      ];
      App.setBreadcrumbs(this.breadcrumbs);
      setTimeout(function() {
        _this.uploadRender();
        _this.$('#templateUploadHolder').find('div').removeClass('uploading');
        return App.resetHeight();
      }, 100);
      this.showCategoryDropdown().done(function() {
        return _this.$("select, input[type=checkbox], .controls input[type=radio]").uniform({
          selectAutoWidth: false
        });
      });
      return this.el;
    },
    addTag: function(e) {
      var tag, tagview;
      e.preventDefault();
      tag = $('#add-tag').val().replace(',', '');
      if (!_.contains(this.tags, tag)) {
        this.tags.push(tag);
      }
      $('#templateTags').val(this.tags.join(','));
      tagview = new App.View.TemplateTag({
        tag: tag
      });
      $('ul.tagsList').append(tagview.render());
      $('#add-tag').val('');
      return App.resetHeight();
    },
    showCategoryDropdown: function() {
      var category, child, dropdown, r, subcat;
      r = $.Deferred();
      dropdown = (function() {
        var _i, _len, _ref, _results;
        _ref = App.appData.categories;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          category = _ref[_i];
          if (_.has(category, 'children')) {
            subcat = (function() {
              var _j, _len1, _ref1, _results1;
              _ref1 = category.children;
              _results1 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                child = _ref1[_j];
                _results1.push("<option value='" + child.id + "'>" + child.label + "</option>");
              }
              return _results1;
            })();
            _results.push("<optgroup label='" + category.label + "'>" + subcat + "</optgroup>");
          } else {
            _results.push("<option value='" + category.id + "'>" + category.label + "</option>");
          }
        }
        return _results;
      })();
      this.$('#templateType').html(dropdown);
      r.resolve();
      return r;
    },
    resetUploadStatus: function() {
      var file, _i, _len, _ref, _results;
      _ref = this.uploader.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        _results.push(file.status = 1);
      }
      return _results;
    },
    uploadRender: function() {
      var _this = this;
      this.uploader = new plupload.Uploader({
        runtimes: 'html5,flash',
        drop_element: 'templateUploadHolder',
        browse_button: 'pickfiles',
        max_file_size: '100mb',
        multiple_queues: true,
        unique_names: true,
        url: "/api/users/" + App.user.id + "/zip",
        flash_swf_url: '/bundles/stampliaweb/js/plupload.flash.swf',
        filters: [
          {
            title: "Zip files",
            extensions: "zip"
          }
        ],
        headers: _.extend({
          Accept: 'application/json'
        }, App.client.getAuthHeaders())
      });
      $('.close').bind('click', function(e) {
        e.preventDefault();
        return $(_this).closest('.flash-message').fadeOut();
      });
      this.uploader.init();
      this.uploader.bind('FilesAdded', function(up, files) {
        $('.flash-message').hide();
        _this.$('#templateUploadHolder').find('div').addClass('uploading');
        _this.uploader.start();
        return up.refresh();
      });
      this.uploader.bind('UploadProgress', function(up, file) {});
      this.uploader.bind('Error', function(up, err) {
        var errors;
        _this.$('#templateUploadHolder').find('div').removeClass('uploading');
        _this.clearErrors();
        errors = JSON.parse(err.response).form.children;
        _this.addErrors(errors);
        _this.uploadRender();
        $('#uploadTemplate').removeClass('ajax');
        return App.resetHeight();
      });
      this.uploader.bind('FileUploaded', function(up, file, info) {
        var fileName, url;
        _this.$('#templateUploadHolder').find('div').removeClass('uploading');
        _this.clearErrors();
        $('#uploadTemplate').removeClass('ajax');
        url = JSON.parse(info.response).zip_path;
        $('#template-zip').val(url);
        fileName = '<fieldset id="file-uploaded" class="left"><div class="control-group">\
            <label class="control-label" for="templateZip">Template File</label>\
            <div class="controls">\
            <input disabled="disabled" id="templateZip" name="templateZip" value="' + file.name + '" type="text">\
            </div>\
            </div>\
            </fieldset>\
            <div class="feedback clear"><strong class="success">Your zip file was successfully uploaded</strong></div>';
        $('#uploader').slideUp();
        $('#tagsManager').after(fileName);
        return App.resetHeight();
      });
      this.$('#templateUploadHolder').on('dragenter', function(e) {
        return e.preventDefault();
      });
      return this.$('#templateUploadHolder').on('drop', function(e) {
        return e.preventDefault();
      });
    },
    submit: function(e) {
      var params, r, template,
        _this = this;
      e.preventDefault();
      $('#uploadTemplate').removeClass('error').addClass('loading').addClass('disabled');
      if (!$('#template-zip').val()) {
        this.clearErrors();
        this.addErrors([
          {
            errors: ['Please upload a zip file first']
          }
        ]);
        $('#uploadTemplate').addClass('error').removeClass('loading').removeClass('disabled');
        return;
      }
      params = {
        zip_path: $('#template-zip').val(),
        name: $('#templateName').val(),
        price: $('input:radio[name=templatePrice]:checked').val(),
        description: $('#templateDescription').val(),
        category: $('#templateType').val(),
        responsive: $('#templateResponsive').val(),
        currency_code: 'EUR'
      };
      if ($('#templateTags').val()) {
        params.tags = $('#templateTags').val().split(',');
      }
      template = new App.Model.UserTemplate(params);
      r = template.save();
      r.done(function() {
        _this.clearErrors();
        $('#uploadTemplate').removeClass('loading').removeClass('disabled');
        $('#uploads').find('.template-upload').remove();
        return $('#uploads').find('.moduleHeader').after('<div class="feedback"><strong class="success">Your template was just uploaded</strong> <a href="#templates">View my templates</a></div>');
      });
      r.always(function() {
        return $('#uploadTemplate').removeClass('loading').removeClass('disabled');
      });
      return r.fail(function(data) {
        _this.clearErrors();
        return _this.addErrors([
          {
            errors: ['Could not save your template']
          }
        ]);
      });
    },
    clearErrors: function() {
      return $('.feedback').remove();
    },
    addErrors: function(errors, parent) {
      var error, k, _ref;
      if (parent == null) {
        parent = $('#uploader');
      }
      if (!$('.feedback').length) {
        parent.after('<div class="feedback" />');
      }
      for (k in errors) {
        error = errors[k];
        if ((error != null ? (_ref = error.errors) != null ? _ref.length : void 0 : void 0)) {
          this.$('.feedback').append('<strong class="error">' + error.errors[0] + '</strong>');
        }
      }
      return App.resetHeight();
    },
    noop: function(e) {
      e.preventDefault();
      return false;
    }
  });

  App.View.TemplateTag = App.View.extend({
    tagName: 'li',
    templateName: 'template-tag',
    tag: null,
    events: {
      'click .btn': 'removeTag'
    },
    initialize: function(options) {
      return this.tag = options.tag, options;
    },
    render: function() {
      $(this.el).html(this.template({
        tag: this.tag
      }));
      $(this.el).css({
        "margin-right": '6px'
      });
      return this.el;
    },
    removeTag: function(e) {
      var tag, tags,
        _this = this;
      e.preventDefault();
      $(this.el).fadeOut(100);
      tag = $(e.currentTarget).text();
      tags = _.reject($('#templateTags').val().split(','), function(t) {
        return t.toLowerCase().trim() === tag.toLowerCase().trim();
      });
      return $('#templateTags').val(tags.join(','));
    }
  });

}).call(this);
