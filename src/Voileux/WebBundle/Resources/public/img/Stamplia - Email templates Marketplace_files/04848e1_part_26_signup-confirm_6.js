// Generated by CoffeeScript 1.4.0
(function() {

  App.View.SignupConfirm = App.View.extend({
    tagName: 'div',
    id: '',
    identity: null,
    templateName: 'signup-confirm',
    events: {
      'click #confirm': "confirm"
    },
    initialize: function() {
      var _ref;
      return _ref = this.options, this.identity = _ref.identity, _ref;
    },
    render: function() {
      $(this.el).html(this.template());
      $('form.login').parsley();
      return this.el;
    },
    confirm: function(e) {
      var email, name, options, password, userCreated, _ref, _ref1, _ref2,
        _this = this;
      $('#confirm').addClass('loading');
      e.preventDefault();
      email = $('#email').val();
      name = (_ref = this.identity.attributes) != null ? _ref.name : void 0;
      password = this.generatePassword();
      options = {
        open_id_identity: (_ref1 = this.identity) != null ? _ref1.id : void 0,
        provider: (_ref2 = this.identity.attributes) != null ? _ref2.provider : void 0
      };
      userCreated = App.client.createUser(name, email, password, options);
      return userCreated.done(function() {
        return setTimeout((function() {
          return App.client.login(email, password, 1).done(function(data) {
            App.setPref('token', data.access_token);
            App.client.token = data.access_token;
            return App.init().done(function() {
              var signedupView;
              $('#confirm').removeClass('loading');
              signedupView = new App.View.SignedUp({
                model: App.user
              });
              $('#signup').html(signedupView.render());
              return $(document).trigger('login.success');
            });
          });
        }), 100);
      });
    },
    generatePassword: function(length) {
      var chars, i, r, _i;
      if (length == null) {
        length = 8;
      }
      chars = "23456789ABCDEFGHJKMNPQRSTUVWXTZabcdefghkmnpqrstuvwxyz";
      r = '';
      for (i = _i = 0; 0 <= length ? _i <= length : _i >= length; i = 0 <= length ? ++_i : --_i) {
        r += chars.charAt(Math.round(Math.random() * chars.length));
      }
      return r;
    }
  });

}).call(this);
