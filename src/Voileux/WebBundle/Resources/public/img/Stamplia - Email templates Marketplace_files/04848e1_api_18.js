// Generated by CoffeeScript 1.4.0
(function() {
  var Stamplia;

  Stamplia = {
    Api: {}
  };

  Stamplia.Api.Client = (function() {

    Client.prototype.token = null;

    Client.prototype.user = null;

    Client.prototype.language = null;

    Client.prototype.api_endpoint = null;

    Client.prototype.token_endpoint = null;

    function Client(client_id, client_no_so_secret, token_endpoint, api_endpoint, language) {
      this.client_id = client_id;
      this.client_no_so_secret = client_no_so_secret;
      this.token_endpoint = token_endpoint;
      this.api_endpoint = api_endpoint;
      this.language = language;
    }

    Client.prototype.setToken = function(token) {
      this.token = token;
    };

    Client.prototype.getToken = function() {
      return this.token;
    };

    Client.prototype.login = function(email, password, remember) {
      var data, ret,
        _this = this;
      data = {
        client_id: this.client_id,
        client_secret: this.client_no_so_secret,
        grant_type: 'password',
        username: email,
        password: password,
        remember_me: remember
      };
      ret = $.ajax(this.token_endpoint, {
        type: 'POST',
        data: data
      }).done(function(data) {
        return _this.token = data.access_token;
      });
      return ret;
    };

    Client.prototype.facebookTrack = function() {
      var f, fb_param,
        _this = this;
      fb_param = {};
      fb_param.pixel_id = '6008035675153';
      fb_param.value = '0.00';
      f = function() {
        var fpw, ref;
        fpw = document.createElement('script');
        fpw.async = true;
        fpw.src = "//connect.facebook.net/en_US/fp.js";
        ref = document.getElementsByTagName('script')[0];
        return ref.parentNode.insertBefore(fpw, ref);
      };
      return f();
    };

    Client.prototype.createUser = function(name, email, password, options) {
      var data, params, provider, ret,
        _this = this;
      if (options == null) {
        options = {};
      }
      data = {
        name: name,
        email: email,
        password: password,
        language_code: options.language_code || this.language || App.language || 'en'
      };
      if (options.open_id_identity) {
        data.open_id_identity = options.open_id_identity;
      }
      provider = options.provider || 'form';
      params = JSON.stringify(data);
      ret = this.request('users', params, false, 'POST', {
        headers: {
          'Accept': 'application/json',
          'Content-type': 'application/json'
        }
      });
      ret.done(function(data) {
        return _this.user = data.user;
      });
      ret.done(function() {
        if (window._gaq) {
          _gaq.push(['_trackPageview', "/user-created/" + data.language_code + "/" + provider]);
        }
        return _this.facebookTrack();
      });
      return ret;
    };

    Client.prototype.getUser = function() {
      var _this = this;
      return this.get('users/me').pipe(function(data) {
        return _this.get(data._links.me.href, {}, true).done(function(data) {
          return _this.account = data.account;
        });
      });
    };

    Client.prototype.getAuthHeaders = function() {
      if (this.token) {
        return {
          Authorization: "Bearer " + this.token
        };
      } else {
        return {};
      }
    };

    Client.prototype.get = function(url, data, url_is_absolute) {
      return this.request(url, data, url_is_absolute, 'GET');
    };

    Client.prototype.post = function(url, data, url_is_absolute, additional_params) {
      return this.request(url, data, url_is_absolute, 'POST', additional_params);
    };

    Client.prototype.postJson = function(url, data, url_is_absolute, additional_params) {
      data = JSON.stringify(data);
      additional_params || (additional_params = {});
      additional_params.contentType = 'application/json';
      return this.request(url, data, url_is_absolute, 'POST', additional_params);
    };

    Client.prototype.putJson = function(url, data, url_is_absolute, additional_params) {
      data = JSON.stringify(data);
      additional_params || (additional_params = {});
      additional_params.contentType = 'application/json';
      return this.request(url, data, url_is_absolute, 'PUT', additional_params);
    };

    Client.prototype.request = function(url, data, url_is_absolute, type, additional_params) {
      var headers, params;
      headers = {
        Accept: 'application/json'
      };
      if (this.language) {
        headers['Accept-Language'] = this.language;
      }
      headers = _.extend(headers, this.getAuthHeaders());
      params = {
        headers: headers,
        data: data,
        type: type
      };
      params = _.extend(params, additional_params);
      if (!url_is_absolute) {
        url = "" + this.api_endpoint + "/" + url;
      }
      return $.ajax(url, params);
    };

    return Client;

  })();

  this.Stamplia = Stamplia;

}).call(this);
