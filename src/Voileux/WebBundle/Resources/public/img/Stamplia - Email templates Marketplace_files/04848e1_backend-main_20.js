// Generated by CoffeeScript 1.4.0
(function() {
  var App, _App,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _App = (function(_super) {

    __extends(_App, _super);

    function _App() {
      return _App.__super__.constructor.apply(this, arguments);
    }

    _App.prototype.View = {};

    _App.prototype.Model = {};

    _App.prototype.urlRoot = null;

    _App.prototype.root = '';

    _App.prototype.user = null;

    _App.prototype.router = null;

    _App.prototype.tmpls = null;

    _App.prototype.language = null;

    _App.prototype.templates = null;

    _App.prototype.perPage = 9;

    _App.prototype.appData = {};

    _App.prototype.started = null;

    _App.prototype.views = {};

    _App.prototype.revenueTreshold = 50;

    _App.prototype.init = function() {
      var gotApp, gotUser, historyStarted, r,
        _this = this;
      $(window).bind('resize', function() {
        return _this.resetHeight();
      });
      gotApp = this.client.get('app');
      gotApp.done(function(data) {
        return _this.appData = data.app;
      });
      gotUser = this.client.getUser();
      gotUser.done(function(user) {
        var loggedIn, userTemplates;
        _this.user = new App.Model.User(user.user);
        _errs.meta['user'] = _this.user.toJSON();
        _this.client.language = _this.user.get('language_code');
        loggedIn = new App.View.LoggedInDropdown();
        $('li.login').html(loggedIn.render());
        _this.handleCart();
        _this.showMessages();
        userTemplates = new App.Model.UserTemplateCollection;
        userTemplates.fetch();
        return userTemplates.fetched.done(function() {
          if (userTemplates.models.length) {
            $('#admin-menu').find('.templates').show();
          }
          return App.resetHeight();
        });
      });
      historyStarted = $.Deferred();
      r = $.when(gotUser, gotApp);
      r.done(function() {
        try {
          Backbone.history.start({
            pushState: false
          });
        } catch (e) {

        }
        if (!Backbone.history.fragment) {
          return App.router.navigate('dashboard', {
            trigger: true
          });
        }
      });
      r.fail(function() {
        if (Backbone.history.fragment || window.location.hash) {
          App.setPref('redirect', window.location.hash);
          Backbone.history.fragment = '';
          window.location.hash = '';
        }
        try {
          Backbone.history.start({
            pushState: false
          });
        } catch (e) {
          Backbone.history.loadUrl();
        }
        return App.router.navigate('signup', {
          trigger: true
        });
      });
      return r;
    };

    _App.prototype.run = function(client, options) {
      this.client = client;
      _errs.meta = {};
      this.language = options.language, this.templates = options.templates, this.perPage = options.perPage, this.revenueTreshold = options.revenueTreshold;
      this.urlRoot = this.client.api_endpoint;
      this.client.setToken(this.getPref('token'));
      App.router = new App.Router;
      return this.start();
    };

    _App.prototype.setBreadcrumbs = function(breadcrumbs) {
      var breadcrumb, list;
      list = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = breadcrumbs.length; _i < _len; _i++) {
          breadcrumb = breadcrumbs[_i];
          if (breadcrumb.link) {
            _results.push(" <li><a href='" + breadcrumb.link + "'>" + breadcrumb.label + "</a></li> ");
          } else {
            _results.push(" <li><span>" + breadcrumb.label + "</span></li> ");
          }
        }
        return _results;
      })();
      return $('#breadcrumb').html(list);
    };

    _App.prototype.setContent = function(html, clear) {
      if (clear == null) {
        clear = true;
      }
      if (clear) {
        $('.admin-module').remove();
      }
      $('#admin-content').append(html);
      return this.resetHeight();
    };

    _App.prototype.setActive = function(cls) {
      $('#admin-menu').find('li').removeClass('active');
      return $('#admin-menu').find('.' + cls).addClass('active');
    };

    _App.prototype.resetHeight = function() {
      var maxHeight;
      maxHeight = 0;
      return $(".equal-height").height('auto').each(function() {
        if ($(this).height() > maxHeight) {
          return maxHeight = $(this).height();
        }
      }).height(maxHeight);
    };

    return _App;

  })(GlobalApp);

  this.App = App = new _App;

}).call(this);
